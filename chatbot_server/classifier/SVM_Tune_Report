# Tuning hyper-parameters for precision

Best parameters set found on development set:

{'C': 30, 'gamma': 0.01, 'kernel': 'rbf'}

Grid scores on development set:

0.133 (+/-0.094) for {'C': 1, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.843 (+/-0.088) for {'C': 1, 'gamma': 0.1, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 1, 'gamma': 0.1, 'kernel': 'poly'}
0.510 (+/-0.159) for {'C': 1, 'gamma': 0.1, 'kernel': 'rbf'}
0.016 (+/-0.000) for {'C': 1, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.843 (+/-0.088) for {'C': 1, 'gamma': 0.01, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 1, 'gamma': 0.01, 'kernel': 'poly'}
0.016 (+/-0.000) for {'C': 1, 'gamma': 0.01, 'kernel': 'rbf'}
0.016 (+/-0.000) for {'C': 1, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.843 (+/-0.088) for {'C': 1, 'gamma': 0.001, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 1, 'gamma': 0.001, 'kernel': 'poly'}
0.016 (+/-0.000) for {'C': 1, 'gamma': 0.001, 'kernel': 'rbf'}
0.843 (+/-0.088) for {'C': 10, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.819 (+/-0.079) for {'C': 10, 'gamma': 0.1, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 10, 'gamma': 0.1, 'kernel': 'poly'}
0.833 (+/-0.067) for {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}
0.133 (+/-0.094) for {'C': 10, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.819 (+/-0.079) for {'C': 10, 'gamma': 0.01, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 10, 'gamma': 0.01, 'kernel': 'poly'}
0.555 (+/-0.143) for {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}
0.016 (+/-0.000) for {'C': 10, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.819 (+/-0.079) for {'C': 10, 'gamma': 0.001, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 10, 'gamma': 0.001, 'kernel': 'poly'}
0.016 (+/-0.000) for {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}
0.827 (+/-0.072) for {'C': 30, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.812 (+/-0.077) for {'C': 30, 'gamma': 0.1, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 30, 'gamma': 0.1, 'kernel': 'poly'}
0.827 (+/-0.076) for {'C': 30, 'gamma': 0.1, 'kernel': 'rbf'}
0.805 (+/-0.182) for {'C': 30, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.812 (+/-0.077) for {'C': 30, 'gamma': 0.01, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 30, 'gamma': 0.01, 'kernel': 'poly'}
0.853 (+/-0.078) for {'C': 30, 'gamma': 0.01, 'kernel': 'rbf'}
0.016 (+/-0.000) for {'C': 30, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.812 (+/-0.077) for {'C': 30, 'gamma': 0.001, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 30, 'gamma': 0.001, 'kernel': 'poly'}
0.106 (+/-0.014) for {'C': 30, 'gamma': 0.001, 'kernel': 'rbf'}
0.822 (+/-0.073) for {'C': 50, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.811 (+/-0.076) for {'C': 50, 'gamma': 0.1, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 50, 'gamma': 0.1, 'kernel': 'poly'}
0.825 (+/-0.079) for {'C': 50, 'gamma': 0.1, 'kernel': 'rbf'}
0.850 (+/-0.066) for {'C': 50, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.811 (+/-0.076) for {'C': 50, 'gamma': 0.01, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 50, 'gamma': 0.01, 'kernel': 'poly'}
0.846 (+/-0.079) for {'C': 50, 'gamma': 0.01, 'kernel': 'rbf'}
0.113 (+/-0.016) for {'C': 50, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.811 (+/-0.076) for {'C': 50, 'gamma': 0.001, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 50, 'gamma': 0.001, 'kernel': 'poly'}
0.133 (+/-0.094) for {'C': 50, 'gamma': 0.001, 'kernel': 'rbf'}
0.820 (+/-0.079) for {'C': 100, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.810 (+/-0.076) for {'C': 100, 'gamma': 0.1, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 100, 'gamma': 0.1, 'kernel': 'poly'}
0.821 (+/-0.082) for {'C': 100, 'gamma': 0.1, 'kernel': 'rbf'}
0.843 (+/-0.088) for {'C': 100, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.810 (+/-0.076) for {'C': 100, 'gamma': 0.01, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 100, 'gamma': 0.01, 'kernel': 'poly'}
0.833 (+/-0.068) for {'C': 100, 'gamma': 0.01, 'kernel': 'rbf'}
0.133 (+/-0.094) for {'C': 100, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.810 (+/-0.076) for {'C': 100, 'gamma': 0.001, 'kernel': 'linear'}
0.016 (+/-0.000) for {'C': 100, 'gamma': 0.001, 'kernel': 'poly'}
0.554 (+/-0.144) for {'C': 100, 'gamma': 0.001, 'kernel': 'rbf'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

          0       0.75      1.00      0.86        15
          1       0.67      0.86      0.75         7
          2       0.83      0.91      0.87        11
          3       0.83      0.56      0.67         9
          4       1.00      1.00      1.00         6
          5       1.00      0.33      0.50         3
          6       1.00      0.50      0.67         6
          7       1.00      0.67      0.80         3
          8       1.00      0.75      0.86         4
          9       0.64      0.78      0.70         9

avg / total       0.83      0.79      0.78        73


# Tuning hyper-parameters for recall

Best parameters set found on development set:

{'C': 1, 'gamma': 0.1, 'kernel': 'linear'}

Grid scores on development set:

0.186 (+/-0.023) for {'C': 1, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.800 (+/-0.090) for {'C': 1, 'gamma': 0.1, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 1, 'gamma': 0.1, 'kernel': 'poly'}
0.397 (+/-0.033) for {'C': 1, 'gamma': 0.1, 'kernel': 'rbf'}
0.100 (+/-0.000) for {'C': 1, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.800 (+/-0.090) for {'C': 1, 'gamma': 0.01, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 1, 'gamma': 0.01, 'kernel': 'poly'}
0.100 (+/-0.000) for {'C': 1, 'gamma': 0.01, 'kernel': 'rbf'}
0.100 (+/-0.000) for {'C': 1, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.800 (+/-0.090) for {'C': 1, 'gamma': 0.001, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 1, 'gamma': 0.001, 'kernel': 'poly'}
0.100 (+/-0.000) for {'C': 1, 'gamma': 0.001, 'kernel': 'rbf'}
0.800 (+/-0.090) for {'C': 10, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.773 (+/-0.089) for {'C': 10, 'gamma': 0.1, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 10, 'gamma': 0.1, 'kernel': 'poly'}
0.793 (+/-0.081) for {'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}
0.186 (+/-0.023) for {'C': 10, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.773 (+/-0.089) for {'C': 10, 'gamma': 0.01, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 10, 'gamma': 0.01, 'kernel': 'poly'}
0.442 (+/-0.083) for {'C': 10, 'gamma': 0.01, 'kernel': 'rbf'}
0.100 (+/-0.000) for {'C': 10, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.773 (+/-0.089) for {'C': 10, 'gamma': 0.001, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 10, 'gamma': 0.001, 'kernel': 'poly'}
0.100 (+/-0.000) for {'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}
0.786 (+/-0.074) for {'C': 30, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.753 (+/-0.061) for {'C': 30, 'gamma': 0.1, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 30, 'gamma': 0.1, 'kernel': 'poly'}
0.787 (+/-0.088) for {'C': 30, 'gamma': 0.1, 'kernel': 'rbf'}
0.627 (+/-0.081) for {'C': 30, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.753 (+/-0.061) for {'C': 30, 'gamma': 0.01, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 30, 'gamma': 0.01, 'kernel': 'poly'}
0.776 (+/-0.081) for {'C': 30, 'gamma': 0.01, 'kernel': 'rbf'}
0.100 (+/-0.000) for {'C': 30, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.753 (+/-0.061) for {'C': 30, 'gamma': 0.001, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 30, 'gamma': 0.001, 'kernel': 'poly'}
0.155 (+/-0.018) for {'C': 30, 'gamma': 0.001, 'kernel': 'rbf'}
0.784 (+/-0.077) for {'C': 50, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.752 (+/-0.060) for {'C': 50, 'gamma': 0.1, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 50, 'gamma': 0.1, 'kernel': 'poly'}
0.780 (+/-0.088) for {'C': 50, 'gamma': 0.1, 'kernel': 'rbf'}
0.762 (+/-0.060) for {'C': 50, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.752 (+/-0.060) for {'C': 50, 'gamma': 0.01, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 50, 'gamma': 0.01, 'kernel': 'poly'}
0.800 (+/-0.090) for {'C': 50, 'gamma': 0.01, 'kernel': 'rbf'}
0.127 (+/-0.019) for {'C': 50, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.752 (+/-0.060) for {'C': 50, 'gamma': 0.001, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 50, 'gamma': 0.001, 'kernel': 'poly'}
0.186 (+/-0.023) for {'C': 50, 'gamma': 0.001, 'kernel': 'rbf'}
0.774 (+/-0.088) for {'C': 100, 'gamma': 0.1, 'kernel': 'sigmoid'}
0.751 (+/-0.060) for {'C': 100, 'gamma': 0.1, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 100, 'gamma': 0.1, 'kernel': 'poly'}
0.776 (+/-0.087) for {'C': 100, 'gamma': 0.1, 'kernel': 'rbf'}
0.800 (+/-0.090) for {'C': 100, 'gamma': 0.01, 'kernel': 'sigmoid'}
0.751 (+/-0.060) for {'C': 100, 'gamma': 0.01, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 100, 'gamma': 0.01, 'kernel': 'poly'}
0.793 (+/-0.081) for {'C': 100, 'gamma': 0.01, 'kernel': 'rbf'}
0.186 (+/-0.023) for {'C': 100, 'gamma': 0.001, 'kernel': 'sigmoid'}
0.751 (+/-0.060) for {'C': 100, 'gamma': 0.001, 'kernel': 'linear'}
0.100 (+/-0.000) for {'C': 100, 'gamma': 0.001, 'kernel': 'poly'}
0.449 (+/-0.090) for {'C': 100, 'gamma': 0.001, 'kernel': 'rbf'}

Detailed classification report:

The model is trained on the full development set.
The scores are computed on the full evaluation set.

             precision    recall  f1-score   support

          0       0.75      1.00      0.86        15
          1       0.67      0.86      0.75         7
          2       0.83      0.91      0.87        11
          3       0.83      0.56      0.67         9
          4       1.00      1.00      1.00         6
          5       1.00      0.33      0.50         3
          6       1.00      0.67      0.80         6
          7       1.00      0.67      0.80         3
          8       1.00      1.00      1.00         4
          9       0.78      0.78      0.78         9

avg / total       0.84      0.82      0.81        73
