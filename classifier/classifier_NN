from keras.models import Sequential
from keras.layers import Dense,Activation,Dropout, Embedding,Conv1D,MaxPooling1D, Flatten, LSTM
from keras.utils import to_categorical
from keras.optimizers import SGD
from keras.layers.advanced_activations import LeakyReLU
from sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer
from classifier.preprocessing import preprocessing
from sklearn import decomposition
from sklearn.model_selection import train_test_split
from collections import Counter
import numpy as np
import clustering.utils as u
from keras.preprocessing import sequence
from keras.preprocessing.text import one_hot,Tokenizer
from keras import callbacks
#preprocess data
docs,y,links = preprocessing("../crawler/clcjsondata.txt").process()
# convert paragraphs into vectors
X = u.tfidf_vectorize(docs)
one_hot_y = to_categorical(y, num_classes= 10)
X_trn,X_tst,y_trn,y_tst = train_test_split(X,one_hot_y,test_size=0.2,random_state=95)
X_trn, X_val, y_trn, y_val = train_test_split(X_trn, y_trn, test_size=0.2, random_state=95)
model = Sequential()
model.add(Dense(np.power(2,7), input_dim = X.shape[1]))
model.add(LeakyReLU(.6233))
model.add(Dropout(.6353))
model.add(Dense(np.power(2,5)))
model.add(LeakyReLU(.5496))
model.add(Dropout(.6525))
model.add(Dense(units=10, activation='softmax'))
model.compile(optimizer='adam',
                  loss='binary_crossentropy',
                  metrics=['accuracy'])
model.fit(X_trn,y_trn,epochs=25,batch_size=16,validation_data=(X_val,y_val))
score = model.evaluate(X_tst,y_tst,batch_size=64)
print("test loss = {0}; test accuracy = {1}".format(score[0],score[1]))